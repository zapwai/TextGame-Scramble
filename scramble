#!/usr/bin/perl
#
# Thanks for playing SCRAMBLE!
# David Ferrone, Aug 2014
##############################
# Keep words in the same directory.  
# You can find this in /usr/dict/words or /usr/share/dict/words

$filename = "words";

sub is_word{
# Input: $text, a string
# Output: 1 if $text is a word in /usr/dict/words, 0 otherwise.
    my $text = $_[0];    
    open(my $file,  "<",  $filename)  or die "Can't open dictionary: $!";
    @words = <$file>;
    close($file);

    chomp @words;

    my $n = 0;

    while ($n <= $#words) {
	if ($words[$n] eq $text)
	{ return 1;}
	else
	{ $n++ }
    }
    return 0;
}

sub is_anagram
# Returns true if the two strings passed as variables are anagrams.
{
    my ($s1, $s2) = @_;

    return (join '', sort { $a cmp $b } split(//, $s1)) eq
	(join '', sort { $a cmp $b } split(//, $s2));
}

sub select_word{
#input: length of word, an integer.
#output a random word from /usr/dict/words of that length.

    my $desired_length = @_[0];
    my $selected_word;
    my $candidate_count = 0;

    open my $dict_fh, '<', $filename
	or die "Can't read words file: $!\n";
  WORD:
    while ( my $word = <$dict_fh> ) {
	chomp $word;
	next WORD if length $word != $desired_length;
	$selected_word = $word if rand ++$candidate_count < 1;
    }

    return $selected_word;
}

sub mix_word{
#input: a string
#output: a permutation of that string (an array)
    my $word = @_[0];
    my @new_word;
    @letters = split(//, $word);

    while ($#letters >= 0){ my $N = int ( rand($#letters) );
			    ($letters[$N], $letters[$#letters]) =
				($letters[$#letters], $letters[$N]); push
				@new_word, pop @letters; } return @new_word}

# ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~ ~~~~~~~~~~~
sub rules{
    print "In basic mode you unscramble random 5 letter words. If you guess incorrectly 3 times, the game ends.\n";
    print "In moderate they are 6 letter words, but you only have 30 seconds until the game ends.\n";
    print "In hard the length of words increases, along with your clock time. But one wrong answer and ...\n\n";
}


sub play_again{
# Input: None
# Output: 0 to quit, 1 to keep playing (set the $playing_game variable equal to this)
    my $play_again = 1;
    while ($play_again != 0){
	print "Play again? (Y/n) : ";
	chomp (my $input_char = <STDIN>);
	
	if ($input_char eq 'n') { print "Thanks for playing!\n"; $play_again = 0; return 0; }
	elsif($input_char eq 'Y'){ $play_again = 0; return 1; }
	else {$play_again = 1;} #unnecessary
    }
}

sub the_game{
# Input: one integer - the word length.
# Output: one integer - 0 for a loss, 1 for a win.
    my $word_length = $_[0];
    my $word = select_word($word_length);	# word of length word_length!
    my @new_word = mix_word($word);	# new_word is a permutation of word

    print "\nThe scrambled word is...\n","\t\t\t\t",@new_word,"\n";

    print "What is your guess?\n";
    chomp($text = <STDIN>);
#    print "\n", $text, " eh? ... \n";

    $text = lc($text);
    $word = lc($word);
    if ($text eq $word) {
	print "That's right, Congratulations!\n";
	return 1;
    }				
    elsif (is_anagram($text, $word) && is_word($text)) {
	print "Oh, er... yes! That's correct!\n";
	return 1;
    }
    else {print "Sorry, you lose this round. \t(The word was $word)\n\n"; return 0;}
}


sub basic_game{
    my $word_length = 5;
    my $playing_game = 1;
    while ($playing_game){
	$win_count = 0;
	$loss_count = 0;

	# 3 losses will end the game in the basic version.
	while ($loss_count < 3){ 
	    my $outcome = the_game($word_length); # outcome is 0 for a loss, 1 for a win.
	    if ($outcome == 1) {$win_count++}
	    else {$loss_count++}
	}
	print "Your overall win count was $win_count!\n\n";
	$playing_game = play_again;
    }
}

sub moderate_game{
    my $word_length = 6;
    my $clock_time = 30;	# seconds
    my $playing_game = 1;
    while ($playing_game){
	$win_count = 0;
	$loss_count = 0;

	my $start_time = time;
	my $clock_running = 1;
		# Time out will lose the game.  (e.g. 30 sec to get as many wins as possible!)
	while ($clock_running){
	    my $current_time = time;
	    my $elapsed_time = $current_time - $start_time;
	    if ($elapsed_time >= $clock_time) {$clock_running = 0}
	    else{    
		print $clock_time - $elapsed_time," seconds left!\n";
		my $outcome = the_game($word_length);
		if ($outcome == 1) {$win_count++}
		else {$loss_count++}
	    }
	}
	print "\n\tTime is up!\n";
	print "Your loss count was $loss_count.\n";
	print "Your overall win count was $win_count!\n\n";
	$playing_game = play_again;
    }
}

sub hard_game{
    my $playing_game = 1;
    while ($playing_game){
	$win_count = 0;

	my $clock_time = 30;	# seconds
	my $start_time = time;
	my $clock_running = 1;

	my $word_length = 4;	# begins at 4 and increases. clock-time is 6x current word length later on.
	while ($clock_running){
	    my $current_time = time;
	    my $elapsed_time = $current_time - $start_time;
	    if ($elapsed_time >= $clock_time) {$clock_running = 0; print "But time was up...\n";}
	    else{    
		$start_time = time;
		$clock_time = 6*$word_length;
		print $clock_time, " seconds left!\n";
		my $outcome = the_game($word_length);
		if ($outcome == 1) {$win_count++; $word_length++}
		else {print "Game over.\n"; $clock_running = 0;}
	    }
	}

	print "Your overall win count was $win_count!\n\n";
	$playing_game = play_again;
    }
}


# ~~~~~~~~~~~
sub Menu{
print "\t\t\tWelcome to SCRAMBLE!\n";
print "(See (r)ules or (q)uit.)\n";
print "Would you like to play (b)asic, (m)oderate, or (h)ard? ";
chomp (my $input_char = <STDIN>);
if ($input_char eq 'b') {basic_game}
elsif ($input_char eq 'm') {moderate_game}
elsif ($input_char eq 'h') {hard_game}
elsif ($input_char eq 'r') {rules; Menu}
elsif ($input_char eq 'q') {print "Okay, bye!\n"}
else {print "Sorry, unavailable right now. Oooops!\n"}
}

Menu
